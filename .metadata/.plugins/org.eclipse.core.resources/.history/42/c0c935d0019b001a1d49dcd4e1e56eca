/* Module Name : USART
 * File Name   : USART_program.c
 * Author      : Bishoy Nabil
 * Version     : 1.0
 * Date        : 13/4/2020 */
#include "USART_interface.h"
#include "USART_config.h"
#include "USART_register.h"

#define STOPBITS_CLEARMASK ((u32)0xFFFFCFFF)
#define PCE_PS_CLEARMASK   ((u32)0xFFFFF9FF)
#define M_CLEARMASK        ((u32)0xFFFFEFFF)//Word length
#define TXE_BIT_INDEX      7
#define RXNE_BIT_INDEX     5
#define UE_

volatile USARTReg_t * const USART_ChannelsArray[5] = {USART1,USART2,USART3,USART4,USART5};

extern ErrorStatus USART_Init(u8 copy_u8USARTNum)
{
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) = (USART_ChannelsArray[copy_u8USARTNum]->CR1) | ;
	(USART_ChannelsArray[copy_u8USARTNum]->BRR) = (BAUDRATE<<4)|((u32)1);
	(USART_ChannelsArray[copy_u8USARTNum]->CR2) = (USART_ChannelsArray[copy_u8USARTNum]->CR2) & STOPBITS_CLEARMASK;
	(USART_ChannelsArray[copy_u8USARTNum]->CR2) = (USART_ChannelsArray[copy_u8USARTNum]->CR2) | STOP_BITS;
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) = (USART_ChannelsArray[copy_u8USARTNum]->CR1) & PCE_PS_CLEARMASK & M_CLEARMASK;
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) = (USART_ChannelsArray[copy_u8USARTNum]->CR1) | PARITY | WORD_LENGTH;
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) = (USART_ChannelsArray[copy_u8USARTNum]->CR1) | RXNE_INTERRUPT;//| TXE_INTERRUPT
	return OK;
}

extern ErrorStatus USART_Send(u8 copy_u8USARTNum, u8 copy_u8Data)
{
	ErrorStatus Local_ErrorStatus = OK;
	USART_ChannelsArray[copy_u8USARTNum]->DR = (u32)copy_u8Data;
	return Local_ErrorStatus;
}

extern ErrorStatus USART_Receive(u8 copy_u8USARTNum, u8* copy_pu8ReceivedData)
{
	ErrorStatus Local_ErrorStatus = OK;

	*copy_pu8ReceivedData = USART_ChannelsArray[copy_u8USARTNum]->DR;

	return Local_ErrorStatus;
}

extern Status USART_Config(u8 copy_u8USARTNum, u32 copy_u32BaudRate, u32 copy_u32StopBits, u32 copy_u32Parity, u32 copy_u32WordLength)
{
	Status Local_Status = IDLE;
	u32 Local_u32CR2 = (USART_ChannelsArray[copy_u8USARTNum]->CR2);
	u32 Local_u32CR1 = (USART_ChannelsArray[copy_u8USARTNum]->CR1);
	(USART_ChannelsArray[copy_u8USARTNum]->BRR) = copy_u32BaudRate;
	Local_u32CR2 = Local_u32CR2 & STOPBITS_CLEARMASK;
	Local_u32CR2 = Local_u32CR2 | copy_u32StopBits;
	(USART_ChannelsArray[copy_u8USARTNum]->CR2) = Local_u32CR2;
	Local_u32CR1 = Local_u32CR1 & PCE_PS_CLEARMASK & M_CLEARMASK;
	Local_u32CR1 = Local_u32CR1 | copy_u32Parity | copy_u32WordLength;
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) = Local_u32CR1;
	return Local_Status;
}

extern ErrorStatus USART_SetFlags(u8 copy_u8USARTNum, u32 copy_u32Flag)
{
	(USART_ChannelsArray[copy_u8USARTNum]->CR1) |= copy_u32Flag;
	return OK;
}

extern ErrorStatus USART_ReadFlags(u8 copy_u8USARTNum, u32 copy_u32Flag, u8* copy_pu8FlagValue)
{
	*copy_pu8FlagValue = (u8)((USART_ChannelsArray[copy_u8USARTNum]->SR) & (copy_u32Flag));
	return OK;
}
